Script started on Fri 15 Feb 2019 01:35:30 AM EST
]0;geluajos@wolf:/h/u11/c5/00/geluajos/csc209/geluajos/lab6wolf:~/csc209/geluajos/lab6$ gdb overflow
GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from overflow...done.
(gdb) lsi[K[K[Klist 36-42
Function "36-42" not defined.
(gdb) i[Kdisplay bef[K[K[Ki
No symbol "i" in current context.
(gdb) d[Kdispl[K[K[K[K[Kb [Kreak overflow.c:35
Breakpoint 1 at 0x40082f: file overflow.c, line 35.
(gdb) b[Kbreak main
Breakpoint 2 at 0x40062e: file overflow.c, line 6.
(gdb) break overflow.c:36[K7
Breakpoint 3 at 0x40083b: file overflow.c, line 37.
(gdb) run
Starting program: /h/u11/c5/00/geluajos/csc209/geluajos/lab6/overflow 

Breakpoint 2, main () at overflow.c:6
6       int main() {
(gdb) continue
Continuing.
Address of the variables:
7fffffffea00 -> &after[0]
7fffffffea04 -> &after[1]
7fffffffea08 -> &after[2]
7fffffffea0c -> &after[3]
7fffffffe9f0 -> &a[0]
7fffffffe9f4 -> &a[1]
7fffffffe9f8 -> &a[2]
7fffffffe9fc -> &a[3]
7fffffffe9e0 -> &before[0]
7fffffffe9e4 -> &before[1]
7fffffffe9e8 -> &before[2]
7fffffffe9ec -> &before[3]
7fffffffe9dc -> &i
7fffffffe9d8 -> &index

Initial values:
i = 0
before = {10, 10, 10, 10}
a = {0, 0, 0, 0}
after = {10, 10, 10, 10}


Breakpoint 1, main () at overflow.c:36
36          for (i = 0; i < OVERFLOW; i++) {
(gdb) display before
1: before = {10, 10, 10, 10}
(gdb) display a
2: a = {0, 0, 0, 0}
(gdb) diapl[K[K[Ksplay after
3: after = {10, 10, 10, 10}
(gdb) continue
Continuing.

Breakpoint 3, main () at overflow.c:37
37              a[i] = i * 10;
1: before = {10, 10, 10, 10}
2: a = {0, 0, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) continue
Continuing.
i = 0
before = {10, 10, 10, 10}
a = {0, 0, 0, 0}
after = {10, 10, 10, 10}

Breakpoint 3, main () at overflow.c:37
37              a[i] = i * 10;
1: before = {10, 10, 10, 10}
2: a = {0, 0, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) next
38              printf("i = %d\n", i);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
i = 1
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
a = {0, 10, 0, 0}
41              printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36          for (i = 0; i < OVERFLOW; i++) {
1: before = {10, 10, 10, 10}
2: a = {0, 10, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 

Breakpoint 3, main () at overflow.c:37
37              a[i] = i * 10;
1: before = {10, 10, 10, 10}
2: a = {0, 10, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
38              printf("i = %d\n", i);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 0}
3: after = {10, 10, 10, 10}
(gdb) 
i = 2
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 0}
3: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 0}
3: after = {10, 10, 10, 10}
(gdb) 
a = {0, 10, 20, 0}
41              printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 0}
3: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36          for (i = 0; i < OVERFLOW; i++) {
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 0}
3: after = {10, 10, 10, 10}
(gdb) 

Breakpoint 3, main () at overflow.c:37
37              a[i] = i * 10;
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 0}
3: after = {10, 10, 10, 10}
(gdb) 
38              printf("i = %d\n", i);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {10, 10, 10, 10}
(gdb) 
i = 3
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {10, 10, 10, 10}
(gdb) 
a = {0, 10, 20, 30}
41              printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36          for (i = 0; i < OVERFLOW; i++) {
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {10, 10, 10, 10}
(gdb) 

Breakpoint 3, main () at overflow.c:37
37              a[i] = i * 10;
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {10, 10, 10, 10}
(gdb) 
38              printf("i = %d\n", i);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {40, 10, 10, 10}
(gdb) print &(after[0])
$1 = (int *) 0x7fffffffea00
(gdb) print &(a[4])
$2 = (int *) 0x7fffffffea00
(gdb) quit
A debugging session is active.

        Inferior 1 [process 37667] will be killed.

Quit anyway? (y or n) y
]0;geluajos@wolf:/h/u11/c5/00/geluajos/csc209/geluajos/lab6wolf:~/csc209/geluajos/lab6$ exit
exit

Script done on Fri 15 Feb 2019 01:40:13 AM EST
